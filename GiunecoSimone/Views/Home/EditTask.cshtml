@model GiunecoSimone.Models.EditTaskMetaData

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Modifica Task";
}

<h2>Modifica task: <u>@ViewBag.TitleTask</u></h2>

@if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
{
    if (ViewBag.Message != null)
    {
        <div class="alert alert-success">
            <strong>Fatto!</strong> @ViewBag.Message
        </div>
    }
}
else
{
    if (ViewBag.Message != null)
    {
        <div class="alert alert-danger">
            <strong>Errore!</strong> @ViewBag.Message
        </div>
    }
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()



<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "control-label" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { disabled = "disable" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @try
            {
                if (ViewBag.State == GiunecoSimone.Enumerator.State.Backlog)
                {
                    var selectList = Enum.GetValues(typeof(GiunecoSimone.Enumerator.State))
                    .Cast<GiunecoSimone.Enumerator.State>
                        ()
                        .Where(e => e == GiunecoSimone.Enumerator.State.Backlog || e == GiunecoSimone.Enumerator.State.Attivi)
                        .Select(e => new SelectListItem
                        {
                            Value = ((int)e).ToString(),
                            Text = GiunecoSimone.Models.Extend.EnumHelperTask.GetDescription(e).ToString()
                        });
                    @Html.DropDownListFor(m => m.State, selectList)
                }
                else if (ViewBag.State == GiunecoSimone.Enumerator.State.Attivi)
                {
                    var selectList = Enum.GetValues(typeof(GiunecoSimone.Enumerator.State))
                    .Cast<GiunecoSimone.Enumerator.State>
                        ()
                        .Where(e => e == GiunecoSimone.Enumerator.State.Attivi || e == GiunecoSimone.Enumerator.State.Completati)
                        .Select(e => new SelectListItem
                        {
                            Value = ((int)e).ToString(),
                            Text = GiunecoSimone.Models.Extend.EnumHelperTask.GetDescription(e).ToString()
                        });
                    @Html.DropDownListFor(m => m.State, selectList)
                }
                else if (ViewBag.State == GiunecoSimone.Enumerator.State.Completati)
                {
                    var selectList = Enum.GetValues(typeof(GiunecoSimone.Enumerator.State))
                    .Cast<GiunecoSimone.Enumerator.State>
                        ()
                        .Where(e => e == GiunecoSimone.Enumerator.State.Attivi || e == GiunecoSimone.Enumerator.State.Completati)
                        .Select(e => new SelectListItem
                        {
                            Value = ((int)e).ToString(),
                            Text = GiunecoSimone.Models.Extend.EnumHelperTask.GetDescription(e).ToString()
                        });
                    @Html.DropDownListFor(m => m.State, selectList)
                }
            }
            catch { }

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WorkedHour, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.WorkedHour, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.WorkedHour, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newComment, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.newComment, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TotalWorkedHour, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TotalWorkedHour, new { htmlAttributes = new { disabled = "disable" } })
        </div>
    </div>
    @foreach (var item in Model.Comments)
    {

        <div class="form-group">
            <div class="col-md-2">
                @item.date
                <div class="col-md-10">
                    <textarea> @item.comment</textarea>
                </div>
            </div>

        </div>
            }

        <ul id="sortable1" class="connectedSortable">
            <p>@Html.LabelFor(item => item.Users)</p>
            @if (ViewBag.Users != null)
            {
                foreach (var item in ViewBag.Users)
                {
                    <li id="@item.Id" class="ui-state-default">@item.FullName</li>
                }
            }
        </ul>

        <ul id="sortable2" class="connectedSortable">
            <p>@Html.LabelFor(item => item.UsersAvailable)</p>
            @if (ViewBag.UsersAvailable != null)
            {
                foreach (var item in ViewBag.UsersAvailable)
                {
                    <li class="ui-state-default">@item.FullName</li>
                }
            }
        </ul>

        <br />

        <div class="form-group">
            <div class="col-md-10">
                <input id="form" type="submit" value="Aggiorna" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>

    $("#form").click(function () {
        //Loop through the Table rows and build a JSON array.
        var users = new Array();
        $("#sortable1 li").each(function () {
            users.push(this.innerText);
        });

        //Send the JSON array to Controller using AJAX.
        $.ajax({
            type: "POST",
            url: "/Home/EditTaskUser",
            data: JSON.stringify(users),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (r) {
                alert(r + " record(s) inserted.");
            }
        });
    });
</script>
