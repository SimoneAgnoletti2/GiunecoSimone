@model GiunecoSimone.Models.EditTaskMetaData

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Modifica Task";
}

<h2>Modifica task: <u>@ViewBag.TitleTask</u></h2>



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "control-label" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.LabelFor(model => model.Date, Model.Date.ToString(), htmlAttributes: new { @class = "control-label" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @if (Model.State == GiunecoSimone.Enumerator.State.Backlog)
            {
                var selectList = Enum.GetValues(typeof(GiunecoSimone.Enumerator.State))
                .Cast<GiunecoSimone.Enumerator.State>
                    ()
                    .Where(e => e == GiunecoSimone.Enumerator.State.Backlog || e == GiunecoSimone.Enumerator.State.Attivi)
                    .Select(e => new SelectListItem
                    {
                        Value = ((int)e).ToString(),
                        Text = GiunecoSimone.Models.Extend.EnumHelperTask.GetDescription(e).ToString()
                    });
                @Html.DropDownListFor(m => m.State, selectList)
            }
            else if (Model.State == GiunecoSimone.Enumerator.State.Attivi)
            {
                var selectList = Enum.GetValues(typeof(GiunecoSimone.Enumerator.State))
                .Cast<GiunecoSimone.Enumerator.State>
                    ()
                    .Where(e => e == GiunecoSimone.Enumerator.State.Attivi || e == GiunecoSimone.Enumerator.State.Completati)
                    .Select(e => new SelectListItem
                    {
                        Value = ((int)e).ToString(),
                        Text = GiunecoSimone.Models.Extend.EnumHelperTask.GetDescription(e).ToString()
                    });
                @Html.DropDownListFor(m => m.State, selectList)
            }
            else if (Model.State == GiunecoSimone.Enumerator.State.Completati)
            {
                var selectList = Enum.GetValues(typeof(GiunecoSimone.Enumerator.State))
                .Cast<GiunecoSimone.Enumerator.State>
                    ()
                    .Where(e => e == GiunecoSimone.Enumerator.State.Attivi || e == GiunecoSimone.Enumerator.State.Completati)
                    .Select(e => new SelectListItem
                    {
                        Value = ((int)e).ToString(),
                        Text = GiunecoSimone.Models.Extend.EnumHelperTask.GetDescription(e).ToString()
                    });
                @Html.DropDownListFor(m => m.State, selectList)
            }

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WorkedHour, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.WorkedHour, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.WorkedHour, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newComment, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.newComment, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TotalWorkedHour, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.LabelFor(model => model.Date, Model.TotalWorkedHour.ToString(), htmlAttributes: new { @class = "control-label" })
        </div>
    </div>

    @foreach (var item in Model.Comments)
    {
        <div class="form-group">
            @Html.DisplayFor(modelItem => item.date)
            <div class="col-md-10">
                @Html.TextAreaFor(modelItem => item.comment, new { htmlAttributes = new { @disabled = "disabled" } })
            </div>
        </div>
    }



<ul id="sortable1" class="connectedSortable">
    <li>@Html.LabelFor(item => item.Users)</li>
    @foreach (var item in Model.Users)
    {
        <li class="ui-state-default">@item.FullName</li>
    }
</ul>

<ul id="sortable2" class="connectedSortable">
    <li>@Html.LabelFor(item => item.UsersAvailable)</li>
    @foreach (var item in Model.UsersAvailable)
    {
        <li class="ui-state-default" style="">@item.FullName</li>
    }
</ul>

    <br />

    <div class="form-group">
        <div class="col-md-10">
            <input type="submit" value="Aggiorna" class="btn btn-default" />
        </div>
    </div>
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}